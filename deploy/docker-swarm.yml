services:
    db:
        image: mysql:8.0.33-oracle
        container_name: db
        ports:
            - '3307:3306'
        networks:
            - webapp
        volumes:
            - dbdata:/var/lib/mysql
            - .docker/database/:/docker-entrypoint-initdb.d/
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: apartments
        deploy:
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints:
                    - node.role==worker
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M

    backend:
        image: maverick0809/apartment-backend:8.5.100-ubuntu-22.04-java11
        container_name: backend
        ports:
            - '8081:8080'
        networks:
            - webapp
        depends_on: [db, traefik]
        deploy:
            replicas: 3
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints:
                    - node.role==worker
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
            update_config:
                parallelism: 2
                delay: 10s
            rollback_config: #? xác định cách xử lý các bản cập nhật dịch vụ không thành công và quay trở lại phiên bản trước đó.
                parallelism: 1 #?  Xác định số lượng tác vụ (tasks) sẽ được quay lại (rollback) song song cùng một lúc.
                failure_action: pause #? nếu có bất kỳ tác vụ nào không thể quay lại thành công, hệ thống sẽ tạm dừng quá trình rollback.
                monitor: 10s #? Nếu tác vụ không ổn định trong khoảng thời gian này, nó sẽ được coi là thất bại.
                max_failure_ratio: 0.3 #? Xác định tỷ lệ tối đa của các tác vụ có thể thất bại trước khi toàn bộ quá trình rollback bị coi là thất bại.
            labels:
                - 'traefik.enable=true'
                - 'traefik.http.routers.backend.rule=Host(`backend.app.devops.online`)'
                - 'traefik.http.routers.backend.service=backend' #? auto-generated
                - 'traefik.http.routers.backend.entrypoints=web'
                - 'traefik.http.routers.backend.middlewares=test-redirectscheme'
                #* backend-secure
                - 'traefik.http.routers.backend-secure.rule=Host(`backend.app.devops.online`)'
                - 'traefik.http.routers.backend-secure.entrypoints=websecure'
                - 'traefik.http.routers.backend-secure.tls.certresolver=myresolver'
                - 'traefik.http.routers.backend-secure.middlewares=basic-auth, test-compress, test-errorpages,test-ratelimit'
                #* Services
                - 'traefik.http.services.backend.loadbalancer.server.port=8080'
                - 'traefik.http.middlewares.test-compress.compress=true'
                - 'traefik.http.middlewares.test-errorpages.errors.status=400-599'
                - 'traefik.http.middlewares.test-errorpages.errors.service=error'
                - 'traefik.http.middlewares.test-errorpages.errors.query=/{status}.html'
                - 'traefik.http.middlewares.test-ratelimit.ratelimit.average=5'
                #* 5 Redirect Scheme HTTP -> HTTPS
                - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https'
                - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true'
    frontend:
        image: maverick0809/apartment-frontend
        # restart: unless-stopped
        container_name: frontend
        ports:
            - '3000:80'
        networks: #? react chỉ giao tiếp đến backend
            - webapp
        deploy:
            replicas: 3
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints:
                    - node.role==worker
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
            update_config:
                parallelism: 2
                delay: 10s
            rollback_config:
                parallelism: 1
                failure_action: pause
                monitor: 10s
                max_failure_ratio: 0.3
            labels:
                - 'traefik.enable=true'
                #* Routers
                #/ frontend
                # - 'traefik.http.routers.frontend.rule=Host(`app.devops.online`)'
                - 'traefik.http.routers.frontend.rule=Host(`frontend.localhost`)'
                - 'traefik.http.routers.frontend.service=frontend' #? auto-generated
                - 'traefik.http.routers.frontend.entrypoints=web' #? port 80
                - 'traefik.http.routers.frontend.middlewares=test-redirectscheme'
                #* product
                - 'traefik.http.routers.frontend-secure.rule=Host(`app.devops.online`)'
                - 'traefik.http.routers.frontend-secure.entrypoints=websecure' #? port 443 for tls
                - 'traefik.http.routers.frontend-secure.tls.certresolver=myresolver' #? tls configuration
                - 'traefik.http.routers.frontend-secure.middlewares=test-compress, test-errorpages,test-ratelimit'
                #* Services
                - 'traefik.http.services.frontend.loadbalancer.server.port=80' #? auto-generated
                - 'traefik.http.middlewares.test-compress.compress=true'
                #* 3 Error Pages Middleware
                - 'traefik.http.middlewares.test-errorpages.errors.status=400-599'
                - 'traefik.http.middlewares.test-errorpages.errors.service=error'
                - 'traefik.http.middlewares.test-errorpages.errors.query=/{status}.html'
                - 'traefik.http.middlewares.test-ratelimit.ratelimit.average=5'
                #* product
                - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https'
                - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true'
        depends_on:
            - backend
    error:
        image: guillaumebriday/traefik-custom-error-pages
        container_name: gateway-error-pages
        networks:
            - webapp
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.error.rule=Host(`error.localhost`)'
            - 'traefik.http.routers.error.service=error'
            - 'traefik.http.services.error.loadbalancer.server.port=80' #? default
            - 'traefik.http.routers.error.entrypoints=web'
    traefik:
        image: traefik:v3.0
        container_name: gateway
        #? the same compare to above
        environment:
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - AWS_REGION=${AWS_REGION}
            - AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}
        ports:
            - '80:80'
            - '443:443'
            - '8080:8080'
        networks:
            - traefik
            - webapp
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./letsencrypt:/letsencrypt
            - ./traefik.yml:/etc/traefik/traefik.yml
            - ./logs:/var/log/traefik/
        healthcheck:
            test: ['CMD', 'traefik', 'healthcheck']
            interval: 10s
            timeout: 2s
            retries: 3
            start_period: 5s
        deploy:
            replicas: 3
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints:
                    - node.role==manager
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M

    prometheus:
        image: prom/prometheus:v2.52.0
        container_name: prometheus
        networks:
            - webapp
        volumes:
            - ./prometheus/:/etc/prometheus/
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        deploy:
            labels:
                - 'traefik.enable=true'
                - 'traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)'
                - 'traefik.http.routers.prometheus.service=prometheus'
                - 'traefik.http.routers.prometheus.entrypoints=web'
                - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'
                - 'traefik.docker.network=webapp'
            placement: #? vị trí place prometheus đặt trên node master
                constraints:
                    - node.role==manager
            restart_policy:
                condition: on-failure

    grafana:
        image: grafana/grafana:7.3.1
        container_name: grafana
        networks:
            - webapp
        ports:
            - '3003:3000'
        depends_on:
            - prometheus
        volumes:
            - grafana_data:/var/lib/grafana
            - ./grafana/provisioning/:/etc/grafana/provisioning/
        env_file:
            - ./grafana/config.monitoring
        user: '104'
        deploy:
            labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.grafana.rule=Host(`grafana.localhost`)'
            - 'traefik.http.routers.grafana.service=grafana'
            - 'traefik.http.routers.grafana.entrypoints=web'
            - 'traefik.http.services.grafana.loadbalancer.server.port=3000'
            - 'traefik.docker.network=webapp'
            placement: #? vị trí place prometheus đặt trên node master
                constraints:
                    - node.role==manager
            restart_policy:
                condition: on-failure
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
        networks:
            - webapp
        ports:
            - '9200:9200'
        container_name: elasticsearch
        environment:
            - ELASTIC_PASSWORD=myelasticpass
            - KIBANA_PASSWORD=kibanapass
            - discovery.type=single-node
            - xpack.security.http.ssl.enabled=false
            - cluster.routing.allocation.disk.threshold_enabled=false
            # - xpack.security.enabled=true
            # - xpack.security.authc.api_key.enabled=true
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.elasticsearch.rule=Host(`elasticsearch.localhost`)'
            - 'traefik.http.routers.elasticsearch.service=elasticsearch'
            - 'traefik.http.routers.elasticsearch.entrypoints=web'
            - 'traefik.http.services.elasticsearch.loadbalancer.server.port=9200'
            - 'traefik.docker.network=webapp'
        # restart: on-failure
        volumes:
            - ./elk/data:/usr/share/elasticsearch/data
    logstash:
        image: docker.elastic.co/logstash/logstash:7.5.0
        networks:
            - webapp
        container_name: logstash
        volumes:
            - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        environment:
            - ELASTIC_USER=elastic
            - ELASTIC_PASSWORD=myelasticpass
            - ELASTIC_HOSTS=http://elasticsearch:9200
            - XPACK_MONITORING_ELASTICSEARCH_HOSTS=[ "http://elasticsearch:9200" ]
            # - XPACK_MANAGEMENT_ENABLED=false
            # - XPACK_MANAGEMENT_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            # - XPACK_MANAGEMENT_ELASTICSEARCH_USERNAME=elastic
            # - XPACK_MANAGEMENT_ELASTICSEARCH_PASSWORD=myelasticpass
            # - XPACK_MONITORING_ENABLED=true
            # - XPACK_MONITORING_ELASTICSEARCH_SSL_VERIFICATION_MODE=none
        depends_on:
            - elasticsearch
        # restart: on-failure
    kibana:
        image: docker.elastic.co/kibana/kibana:7.17.3
        networks:
            - webapp
        container_name: kibana
        environment:
            - SERVER_NAME=kibana
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=kibanapass
        ports:
            - '5601:5601'
        depends_on:
            - elasticsearch
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.kibana.rule=Host(`kibana.localhost`)'
            - 'traefik.http.routers.kibana.service=kibana'
            - 'traefik.http.routers.kibana.entrypoints=web'
            - 'traefik.http.services.kibana.loadbalancer.server.port=5601'
            - 'traefik.docker.network=webapp'
        # restart: on-failure
    filebeat:
        image: docker.elastic.co/beats/filebeat:7.17.3
        container_name: filebeat
        networks:
            - webapp
        command: filebeat -e -strict.perms=false
        volumes:
            - ./elk/filebeat.yml:/usr/share/filebeat/filebeat.yml
            - ./logs:/var/log/server
        # restart: on-failure

networks:
    traefik:
        driver: overlay
        external: true
    webapp:
        driver: overlay
        external: true

volumes:
    dbdata: {}
    prometheus_data: {}
    grafana_data: {}
